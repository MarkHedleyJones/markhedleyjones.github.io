APT_MIRROR      := ""
BASE_IMAGE      := debian:bullseye-slim
WORKSPACE_NAME  := docs

# These settings only apply to the production image
TAG             := latest
USER_GID        := 1000
USER_NAME       := user
USER_UID        := 1000

# Option to build the image using Docker buildkit
USE_BUILDKIT    ?= 0

# Use caution when editing below this line - things may break
################################################################################
IMAGE_NAME      := $(shell basename $(CURDIR))
WORKDIR         := $(shell if [ '$(USER_NAME)' = 'root' ]; then echo '/root'; \
				           else echo '/home/$(USER_NAME)'; fi)
.PHONY: development
development: pre-build build-development-image post-build

.PHONY: production
production: pre-build build-production-image post-build

# A development build does not include the workspace
.PHONY: build-development-image
build-development-image:
	DOCKER_BUILDKIT=$(USE_BUILDKIT) docker build \
		--target development-image \
		--build-arg APT_MIRROR=$(APT_MIRROR) \
		--build-arg BASE_IMAGE=$(BASE_IMAGE) \
		--build-arg USER_GID=$(shell id --group) \
		--build-arg USER_NAME=$(shell id --user --name) \
		--build-arg USER_UID=$(shell id --user) \
		--build-arg WORKDIR=$(HOME) \
		--build-arg WORKSPACE_NAME=$(WORKSPACE_NAME) \
		--tag $(IMAGE_NAME):development \
		.
	@printf "# This file is automatically generated and should not be edited manually\n" > .docker-bbq
	@printf "PRIVILEGED=True\nWORKSPACE_NAME=$(WORKSPACE_NAME)" >> .docker-bbq
	@echo "Development image built - the following features will been enabled:"
	@echo " - Automatic workspace mounting"
	@echo " - Privileged container mode"
	@echo "WARNING: Running privileged containers can be dangerous!"
	@echo "         Only run development images if you trust them"

# A production build includes the workspace in the final image
.PHONY: build-production-image
build-production-image:
	DOCKER_BUILDKIT=$(USE_BUILDKIT) docker build \
		--target production-image \
		--build-arg APT_MIRROR=$(APT_MIRROR) \
		--build-arg BASE_IMAGE=$(BASE_IMAGE) \
		--build-arg USER_GID=$(USER_GID) \
		--build-arg USER_NAME=$(USER_NAME) \
		--build-arg USER_UID=$(USER_UID) \
		--build-arg WORKDIR=$(WORKDIR) \
		--build-arg WORKSPACE_NAME=$(WORKSPACE_NAME) \
		--tag $(IMAGE_NAME):$(TAG) \
		.
	@printf "# This file is automatically generated and should not be edited manually\n" > .docker-bbq
	@printf "MOUNT_WORKSPACE=False\nPRIVILEGED=False\nWORKSPACE_NAME=$(WORKSPACE_NAME)\nWORKSPACE_PATH=$(WORKDIR)" >> .docker-bbq
	@echo "Production image built - automatic workspace mounting disabled for $(IMAGE_NAME)"

# Preparatory stage before building the target image
.PHONY: pre-build
pre-build:
	# Cleaning the packagelist ...
	@mkdir -p build/tmp
	@cat build/packagelist | sort --unique | sed '/^\s*$$/d' > build/tmp/packagelist
	@cp build/tmp/packagelist build/packagelist
	# Detecting Python requirements ...
	@mkdir -p build/tmp/pip
	@reqs="$(shell ls build | grep "pip[2-3]\?-requirements.txt" | cut -d '-' -f 1 | sed 's/pip/python/')" \
		&& if [ ! -z "$$reqs" ] ; then cd build && cp pip*-requirements.txt tmp/pip && for py in $$reqs ; do \
		printf "$${py}-pip\n$${py}-wheel\n$${py}-setuptools\n" >> tmp/packagelist ; done ; fi
	# Fetching any remote resources ...
	@mkdir -p build/resources && if [ -f build/urilist ] ; then if ! which wget > /dev/null; then \
		echo "ERROR: Missing dependency: wget" && exit 1 ; else cat build/urilist | while read uri ; do echo "Downloading \
		$$uri ..." \ && wget --quiet --no-clobber --directory-prefix build/resources/ $$uri ; done ; fi ; fi

# Post-build clean-up stage
.PHONY: post-build
post-build:
	@rm -rf build/tmp
